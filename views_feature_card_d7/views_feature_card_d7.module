<?php

/**
 * Implements of hook_views_api().
 */
function views_feature_card_d7_views_api() {
  return array(
    'api' => '3.0-alpha1',
    'path' => drupal_get_path('module', 'views_feature_card_d7'),
  );
}

/**
 * Implements of hook_theme().
 */
function views_feature_card_d7_theme($existing, $type, $theme, $path) {
  return array(
    'views_feature_card_d7' => array(
      'variables' => array(
        'view' => NULL,
        'options' => array(),
        'rows' => array(),
        'title' => NULL,
      ),
    ),
    'views_feature_card_d7_inner' => array(

      'variables' => array(
        'view' => NULL,
        'options' => array(),
        'rows' => array(),
        'title' => NULL,
        'result' => array(),
        'parent' => NULL,
      ),
    ),
  );
}

/**
 * Theme function for the feature card style plugin.
 *
 * We need to do some weirdness that makes more sense as a theme function
 * than as a template.
 *
 * @ingroup themeable
 * @link http://drupal.org/node/355919
 */
function theme_views_feature_card_d7($variables) {
  $view = $variables['view'];
  $options = $variables['options'];
  $rows = $variables['rows'];
  $title = $variables['title'];

  $result = $view->result;
  $fields = &$view->field;

  $parents = array();

//    if (! $fields[$options['feature_left']] instanceof views_handler_field) {
//        drupal_set_message(t('Left Feature Region is invalid: %field', array('%field' => $options['feature_left'])), 'error');
//        return '';
//    }
//
//    if (! $fields[$options['feature_right']] instanceof views_handler_field) {
//        drupal_set_message(t('Right Feature Region is invalid: %field', array('%field' => $options['feature_right'])), 'error');
//        return '';
//    }
//
//    if (! $fields[$options['feature_center']] instanceof views_handler_field) {
//        drupal_set_message(t('Center Feature Region is invalid: %field', array('%field' => $options['feature_center'])), 'error');
//        return '';
//    }

//
//    if ($fields[$options['feature_center']] instanceof views_handler_field) {
//        drupal_set_message(t('Center Feature Region is invalid: %field', array('%field' => $options['feature_center'])), 'error');
//        return '';
//    }
//
//
//
//    if ( $fields[$options['feature_center']] ==  $fields[$options['feature_right']] ) {
//        drupal_set_message(t('Katria Breaking Things Center Feature Region is invalid: %field', array('%field' =>
//            $options['feature_center'])), 'error');
//        return '';
//    }

//  if (! $fields[$options['main_field']] instanceof views_handler_field) {
//    drupal_set_message(t('Main field is invalid: %field', array('%field' => $options['main_field'])), 'error');
//    return '';
//  }
//
//  if (! $fields[$options['parent_field']] instanceof views_handler_field) {
//    drupal_set_message(t('Parent field is invalid: %field', array('%field' => $options['parent_field'])), 'error');
//    return '';
//  }

  // The field structure of Field API fields in a views result object is...
  // ridiculous.  To avoid having to deal with it, we'll first iterate over all
  // records and normalize out the main and parent IDs to new properties. That
  // vastly simplifies the code that follows.  This particular magic
  // incantation extracts the value from each record for the appropriate field
  // specified by the user.  It then normalizes that value down to just an int,
  // even though in some cases it is an array.  See views_feature_card_d7_normalize_key().
  // Finally, we build up a list of all main keys in the result set so that
  // we can normalize top-level records below.
//  foreach ($result as $i => $record) {
//      $result[$i]->views_feature_card_d7_left = views_feature_card_d7_normalize_key($fields[$options['feature_left']]->get_value($record), $fields[$options['feature_left']]);
//      $result[$i]->views_feature_card_d7_right = views_feature_card_d7_normalize_key($fields[$options['feature_right']]->get_value($record), $fields[$options['feature_right']]);
//      $result[$i]->views_feature_card_d7_center = views_feature_card_d7_normalize_key($fields[$options['feature_center']]->get_value($record), $fields[$options['feature_center']]);

//    $result[$i]->views_feature_card_d7_main = views_feature_card_d7_normalize_key($fields[$options['main_field']]->get_value($record), $fields[$options['main_field']]);
//    $result[$i]->views_feature_card_d7_parent = views_feature_card_d7_normalize_key($fields[$options['parent_field']]->get_value($record), $fields[$options['parent_field']]);
//
//    $parents[] = $record->views_feature_card_d7_main;
  }

  // Normalize the top level of records to all point to 0 as their parent
  // We only have to do this once, so we do it here in the wrapping function.
//  foreach ($result as $i => $record) {
//    if (! in_array($record->views_feature_card_d7_parent, $parents)) {
//      $result[$i]->views_feature_card_d7_parent = 0;
//    }
//  }

  // Recursively render each item.
//  $feature = theme('views_feature_card_d7_inner', array(
//    'view' => $view,
//    'options' => $options,
//    'rows' => $rows,
//    'title' => $title,
//    'result' => $result,
//    'parent' => 0,
//    )
//  );
//
//  return $title . $feature;
//}

/**
 * Inner recursive theme function for Views Feature Card theming.
 *
 * @ingroup themeable
 * @param $view
 * @param $options
 * @param $row
 * @param $title
 * @param $result
 *   An array representing the raw data returned from the query.
 * @param $parent
 *   The id of the parent entry in the call stack.
 */
//function theme_views_feature_card_d7_inner($variables) {
//  $view = $variables['view'];
//  $options = $variables['options'];
//  $rows = $variables['rows'];
//  $title = $variables['title'];
//  $result = $variables['result'];
//  $parent = $variables['parent'];
//
//  $items = array();
//  foreach ($result as $i => $record) {
//    if ($record->views_feature_card_d7_parent == $parent) {
//      $variables['parent'] = $record->views_feature_card_d7_main;
//      $items[] = $rows[$i] . call_user_func(__FUNCTION__, $variables);
//    }
//  }
//  return count($items) ? theme('item_list', array('items' => $items, 'type' => $options['type'])) : '';
//}

/**
 * Normalize a value out of the record to an int.
 *
 * If the field in question comes from Field API, then it will be an array, not
 * an int.  We need to detect that and extract the int value we want from it.
 * Note that because Field API structures are so free-form, we have to specifically
 * support each field type.  For right now we support entityreference (target_id),
 * nodereference (nid), userreference (uid), and taxonomyreference (tid).
 *
 * @param mixed $value
 *   The value to normalize.  It should be either an int or an array. If an int,
 *   it is returned unaltered.  If it's an array, we extract the int we want
 *   and return that.
 * @param views_handler_field $field
 *   Metadata about the field we are extracting information from.
 * @return int
 *   The value of this key, normalized to an int.
 */
//function views_feature_card_d7_normalize_key($value, views_handler_field $field) {
//  if (is_array($value) && count($value)) {
//    if (isset($field->field_info['columns'])) {
//      $columns = array_keys($field->field_info['columns']);
//      foreach ($columns as $column) {
//        if (in_array($column, array('target_id', 'nid', 'uid', 'tid'))) {
//          $field_property = $column;
//          break;
//        }
//      }
//    }
//    else {
//      $field_property = '';
//    }
//    return $field_property ? $value[0][$field_property] : 0;
//  }
//  else {
//    return $value ? $value : 0;
//  }
//}




/**
 * Display a view as a byu card style.
 */
function template_preprocess_views_view_byu_feature_card(&$variables) {

    drupal_add_js('//cdn.byu.edu/byu-feature-card/latest/byu-feature-card.min.js', 'external');
    drupal_add_css('//cdn.byu.edu/byu-feature-card/latest/byu-feature-card.min.css', 'external');

    $view = $variables['view'];
    $rows = $variables['rows'];
//    $options = views_feature_card_d7_get_options($view->style_plugin->options);
    $options = $view->style_options;
//    dpm($options);
//    print_r($variables);
//    dpm($variables);
//    dpm($rows);
    $columns  = $options['columns'];
    $alignment = (isset($options['alignment']) ? $options['alignment'] : 'center');
    $featureTitle  = $options['feature_title'];
    if (!empty($options['title_color'])) {
        // this is an array of the field and it's options
        $titleColor  = $options['title_color'];
    } else {
        // no array -
        $titleColor = false;
    }
     // if the Title Color field is empty, it's okay
    $featureTop = $options['feature_top'];
    $featureLeft  = $options['feature_left'];
    $featureRight  = $options['feature_right'];
    $featureCenter  = $options['feature_center'];

    if (!empty($variables['rows'])) {
        $variables['card_width'] = array();
        $widthClass = 'columns-' . $columns;
        $variables['card_width'] = $widthClass;
        $variables['cols'] = $columns;
        $variables['alignment'] = $alignment;

        //  php string replace underscores for dashes CHECK
        $featureTop = str_replace('_', '-', $featureTop);
        $featureLeft = str_replace('_', '-', $featureLeft);
        $featureRight = str_replace('_', '-', $featureRight);
        $featureCenter = str_replace('_', '-', $featureCenter);
        $featureTitle = str_replace('_', '-', $featureTitle);
        $titleColor = str_replace('_', '-', $titleColor);

        $variables['feature_title'] = $featureTitle;
        $variables['title_color'] = $titleColor;
        $variables['feature_top'] = $featureTop;
        $variables['feature_left'] = $featureLeft;
        $variables['feature_right'] = $featureRight; // is an array
        $variables['feature_center'] = $featureCenter;


        foreach ($variables['rows'] as $i => $row) {
        }
    }
}

/**
 * Set default options.
 */
function views_feature_card_d7_get_options($array) {
    $options = array();
    foreach ($array as $key => $value) {
        if (!is_array($value)) {
            $options[$key] = $value;
        }
        else {
            $options = array_merge($options, views_feature_card_d7_get_options($value));
        }
    }
    return $options;
}